import argparse
import os
import re
import subprocess


from core.config import BASE_DIR

from core.engine.generator import generate_main, generate_main_klee
from core.engine.compiler import compile_x86, compile_klee
from core.engine.tracer import run_gdb_trace
from core.engine.klee_runner import get_klee_test_inputs

#from core.engine.analyzer import analyze_trace, compare_runs

def fzf_select_file(extension):
    """Pou≈æije fzf k v√Ωbƒõru souboru s danou p≈ô√≠ponou."""
    try:
        # Z√≠sk√°me aktu√°ln√≠ adres√°≈ô, ve kter√©m se nach√°z√≠me
        #current_dir = os.getcwd()

        # P≈ôid√°me mo≈ænost vr√°cen√≠ se zpƒõt o √∫rove≈à v√Ω≈°
        #command = f"find {current_dir} -type f -name '*{extension}' | fzf --preview 'cat {}' --bind 'ctrl-u:up,ctrl-d:down,ctrl-h:backward-delete-char'"

        # Spust√≠me fzf a z√≠sk√°me vybran√Ω soubor
        #file_path = subprocess.check_output(command, shell=True).decode().strip()

        # Pou≈æijeme p≈ô√≠kaz find a fzf pro vyhled√°n√≠ souboru
        command = f"find . -type f -name '*{extension}' | fzf"
        file_path = subprocess.check_output(command, shell=True).decode().strip()
        
        # Zkontrolujeme, jestli u≈æivatel vybral nƒõjak√Ω soubor
        if file_path and os.path.exists(file_path):
            return file_path
        else:
            print(f"‚ùå Nebyl vybr√°n ≈æ√°dn√Ω {extension} soubor.")
            return None
    except subprocess.CalledProcessError:
        print("‚ùå fzf nebyl √∫spƒõ≈°nƒõ spu≈°tƒõn nebo nenalezl ≈æ√°dn√Ω soubor. Zkus√≠me manu√°ln√≠ volbu.")
        # Pokud fzf sel≈æe, d√°me mo≈ænost manu√°ln√≠ho v√Ωbƒõru souboru
        file_path = input(f"Zadej cestu k {extension} souboru: ").strip()
        
        if not os.path.exists(file_path):
            print(f"‚ùå Soubor {file_path} neexistuje.")
            return None
        
        return file_path
    return None  # Pokud nic nevybral


def extract_functions_from_header(header_file):
    """Najde deklarace funkc√≠ v hlaviƒçkov√©m souboru."""
    functions = {}
    with open(header_file, "r") as f:
        for line in f:
            match = re.match(r"^\s*(\w[\w\s\*]+)\s+(\w+)\s*\((.*?)\)\s*;", line)
            if match:
                return_type, func_name, params = match.groups()
                param_list = [p.strip() for p in params.split(",") if p]
                functions[func_name] = param_list
    return functions    


def select_function(header_file=None, src_file=None, use_klee=False):
    """Nech√° u≈æivatele vybrat .h soubor, funkci a odpov√≠daj√≠c√≠ .c soubor."""
    print(f"Klee {use_klee}")
    # ‚úÖ V√Ωbƒõr hlaviƒçkov√©ho souboru pomoc√≠ fzf
    if not header_file:
        print("\nüìÇ Vyber hlaviƒçkov√Ω soubor (.h):")
        header_file = fzf_select_file(".h")

    # Kontrola platnosti .h souboru, opakovat, dokud nebude platn√Ω
    while not header_file or not os.path.exists(header_file):
        print("‚ùå Chyba: Nevybral jsi platn√Ω .h soubor.")
        print("\nüìÇ Vyber znovu hlaviƒçkov√Ω soubor (.h):")
        header_file = fzf_select_file(".h")    


    # üîç Extrakce funkc√≠ z hlaviƒçkov√©ho souboru
    functions = extract_functions_from_header(header_file)
    if not functions:
        print(f"‚ùå V souboru {header_file} nebyly nalezeny ≈æ√°dn√© funkce.")
        exit(1)

    # üõ† V√Ωbƒõr funkce
    print("\nüìå Nalezen√© funkce v hlaviƒçkov√©m souboru:")
    for func, params in functions.items():
        param_str = ", ".join(params) if params else "void"
        print(f" - {func}({param_str})")

    target_function = input("\nüìù Zadej jm√©no funkce k pou≈æit√≠: ")
    while target_function not in functions:
        print("‚ùå Neplatn√° funkce. Zkus to znovu.")
        target_function = input("\nüìù Zadej jm√©no funkce k pou≈æit√≠: ")    


    param_types = [param.split()[0] for param in functions[target_function]]
    print(f"Parametry typy: {param_types}")
    # üõ† V√Ωbƒõr .c souboru pomoc√≠ fzf, pokud nen√≠ zad√°n
    if not src_file:
        print("\nüìÇ Vyber odpov√≠daj√≠c√≠ .c soubor:")
        src_file = fzf_select_file(".c")

    # Kontrola platnosti .c souboru a existence vybran√© funkce
    while not src_file or not os.path.exists(src_file):
        print("‚ùå Chyba: Nevybral jsi platn√Ω .c soubor.")
        print("\nüìÇ Vyber znovu odpov√≠daj√≠c√≠ .c soubor:")
        src_file = fzf_select_file(".c")

    # Zkontrolujeme, jestli .c soubor obsahuje funkci
    with open(src_file, "r") as f:
        file_content = f.read()
        if target_function not in file_content:
            print(f"‚ùå Soubor {src_file} neobsahuje funkci {target_function}. Zkus to znovu.")
            src_file = None
            while not src_file or not os.path.exists(src_file) or target_function not in open(src_file).read():
                print("\nüìÇ Vyber odpov√≠daj√≠c√≠ .c soubor s po≈æadovanou funkc√≠:")
                src_file = fzf_select_file(".c")

    # Vygenerov√°n√≠ `generated_main.c`
    generate_main(target_function, functions[target_function], header_file)

    print(f"\n‚úÖ Generov√°n√≠ `generated_main.c` dokonƒçeno pro funkci `{target_function}` ze souboru `{header_file}`.")

    # üîß Kompilace souboru `generated_main.c`
    print("\nüî® Kompilace `generated_main.c`...")
    src_dir = os.path.dirname(src_file)
    binary_file = os.path.join(BASE_DIR, "build", f"binary_{target_function}.out")
    compile_x86(binary_file=binary_file, src_file=src_file, src_dir = src_dir)
    print(f"‚úÖ Kompilace dokonƒçena pro `generated_main.c`.")

    if use_klee:
        klee_dir = os.path.join(BASE_DIR, "logs", target_function, "klee_output")
        os.makedirs(klee_dir, exist_ok=True)
        bitcode_file = os.path.join(klee_dir, "klee_program.bc")
 
        generate_main_klee(target_function, functions[target_function], header_file)
        print(f"‚úÖ Vygenerov√°n `generated_main_klee.c`.")

        compile_klee(klee_dir, src_file, src_dir)
        print(f"‚úÖ Kompilace pro KLEE dokonƒçena.")

        file_path, test_data = get_klee_test_inputs(klee_dir, bitcode_file, param_types)
        print(f"[INFO] üìÅ Testovac√≠ vstupy ulo≈æeny: {file_path}")
        print(f"[INFO] üîç Testovac√≠ data: {test_data}")


def run_trace(binary, params):
    """Spust√≠ bin√°rku s parametry a vytvo≈ô√≠ trace.log."""
    # TODO: Spu≈°tƒõn√≠ a z√≠sk√°n√≠ logu
    print(f"Spou≈°t√≠m {binary} s parametry {params}")

def analyze_trace(trace_file):
    """Analyzuje trace.log a vytvo≈ô√≠ JSON."""
    # TODO: Implementace anal√Ωzy
    print(f"Analyzuji {trace_file} -> v√Ωstupn√≠ JSON")

def compare_results(json_dir):
    """Porovn√° v√≠ce v√Ωsledk≈Ø anal√Ωzy."""
    # TODO: Implementace porovn√°n√≠
    print(f"Porovn√°v√°m v√Ωsledky v {json_dir}")

def main():
    parser = argparse.ArgumentParser(description="CLI n√°stroj pro anal√Ωzu bin√°rek.")
    subparsers = parser.add_subparsers(dest="command")

    # V√Ωbƒõr funkce a kompilace
    select_parser = subparsers.add_parser("select-function", help="Vyber funkci z .h souboru a kompiluj.")
    select_parser.add_argument("-H", "--header", required=False, help="Hlaviƒçkov√Ω soubor .h")
    select_parser.add_argument("-c", "--source", required=False, help="Zdrojov√Ω soubor .c")
    select_parser.add_argument("--klee", action="store_true", help="Pou≈æ√≠t KLEE anal√Ωzu")


    # Spu≈°tƒõn√≠ trace
    trace_parser = subparsers.add_parser("run-trace", help="Spus≈• bin√°rku a vytvo≈ô trace.log")
    trace_parser.add_argument("binary", help="Bin√°rn√≠ soubor")
    trace_parser.add_argument("params", nargs="+", help="Parametry pro spu≈°tƒõn√≠")

    # Anal√Ωza trace logu
    analyze_parser = subparsers.add_parser("analyze-trace", help="Analyzuj trace.log")
    analyze_parser.add_argument("trace_file", help="Trace log k anal√Ωze")

    # Porovn√°n√≠ v√Ωsledk≈Ø
    compare_parser = subparsers.add_parser("compare-results", help="Porovnej v√Ωsledky anal√Ωzy")
    compare_parser.add_argument("json_dir", help="Slo≈æka s JSON soubory")

    args = parser.parse_args()

    if args.command == "select-function":
        select_function(header_file=args.header, src_file=args.source, use_klee=args.klee)
    elif args.command == "run-trace":
        run_trace(args.binary, args.params)
    elif args.command == "analyze-trace":
        analyze_trace(args.trace_file)
    elif args.command == "compare-results":
        compare_results(args.json_dir)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
